// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Product {
  id            String      @id @default(cuid())
  categoryId    String?
  product_name  String
  description   String
  amount        Int
  is_new        Boolean     @default(true)
  is_bestseller Boolean     @default(false)
  image_url     String
  publishedAt   DateTime    @default(now())
  publishedBy   String
  updatedAt     DateTime    @updatedAt
  category      Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  review        Review[]
  orderItem     OrderItem[]

  @@index(categoryId)
  @@map("product")
}

model Category {
  id            String    @id @default(cuid())
  category_name String
  products      Product[]

  @@map("category")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index(userId)
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(userId)
  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  order         Order[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtoken")
}

model Order {
  id           Int         @id @default(autoincrement())
  description  String?
  total_amount Float?
  status       OrderStatus @default(notpaid)
  order_item   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User        @relation(fields: [user_id], references: [id])
  user_id      String

  @@index(user_id)
  @@map("order")
}

model OrderItem {
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  order      Order    @relation(fields: [order_id], references: [id])
  order_id   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([product_id, order_id])
  @@index([order_id])
  @@index([product_id])
  @@map("order_item")
}

model Review {
  id         String   @id @default(cuid())
  product_id String?
  username   String
  date       DateTime @default(now())
  rating     Int
  message    String
  Products   Product? @relation(fields: [product_id], references: [id], onDelete: SetNull)

  @@index([product_id])
  @@map("review")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  requires_payment_method
  requires_confirmation
  requires_action
  requires_capture
  notpaid
  processing
  succeeded
  failed
  canceled
}
